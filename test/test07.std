------------------------------------------------------------
// test07.c
// Generated by Cobol-to-C compiler from test07.cob.

#include <coblib/cobfunc.h>

// This program is called test-program
// Written on intel486
// Written for intel486
enum {
    _pi__FirstParagraph,
    _pi_start_x,
    _pi_loop_x,
    _pi__NParagraphs,
    _pi__Exit,
    _po__Next = 1
};

static int start_x (void);
static int loop_x (void);


static FILE* print_out UNUSED;

static struct {
    struct {
	char print_one [4];
	char print_two [2];
	char print_three [3];
	char print_four [2];
	char print_five [5];
    } print_social_security_number;
    char space_x [11];
    char print_name [36];
} print_out_record UNUSED;

static struct {
    long id_number;
    char filler000 [2];
    char name [16];
    char filler001 [2];
    char address [36];
} weird_record UNUSED;
static long counter UNUSED;


static void _SetVarValues (void)
{
    _AssignVarString (weird_record.filler000, _space_var, 1, 200);
    _AssignVarString (weird_record.filler001, _space_var, 1, 200);
}

static int _FirstParagraph (void)
{
    return _po__Next;
}

static int start_x (void)
{
start_x: UNUSED
    _OpenSequentialFile (&print_out, "output-file", "wb");
    counter = 0;
    return _po__Next;
}

static int loop_x (void)
{
loop_x: UNUSED
    counter = counter + 1;
    if ((counter > 50))
    {
	return _pi__Exit;
    }
    weird_record.id_number = counter;
    _AssignVarString (weird_record.name, "Weirdo", 15, 0);
    _AssignVarString (weird_record.address, "nowhere.loopback.edu", 35, 0);
    _WriteIntegerVar (print_out, weird_record.id_number, "999");
    _WriteStringVar (print_out, weird_record.filler000, "x");
    _WriteStringVar (print_out, weird_record.name, "xxxxxxxxxxxxxxx");
    _WriteStringVar (print_out, weird_record.filler001, "x");
    _WriteStringVar (print_out, weird_record.address, "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
    fprintf (print_out, "\n");
    goto loop_x;
    return _po__Next;
}

int main (void)
{
    _InstallSignalHandlers();
    _SetVarValues();
    for (long cpi = _pi__FirstParagraph; cpi < _pi__NParagraphs;) {
	switch (cpi) {
	    case _pi__FirstParagraph:	cpi += _FirstParagraph(); break;
	    case _pi_start_x:	cpi += start_x(); break;
	    case _pi_loop_x:	cpi += loop_x(); break;
	    default:	cpi = _pi__Exit; assert (!"abnormal exit"); break;
	}
    }
    return EXIT_SUCCESS;
}
------------------------------------------------------------
------------------------------------------------------------

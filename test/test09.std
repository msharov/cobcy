------------------------------------------------------------
// test09.c
// Generated by Cobol-to-C compiler from test09.cob.

#include <coblib/cobfunc.h>

// This program is called test-program
enum {
    _pi__FirstParagraph,
    _pi_display_address,
    _pi__NParagraphs,
    _pi__Exit,
    _po__Next = 1
};

static int display_address (void);

//  all of the above is required and
//         no abbreviations are allowed.

static struct {
    long vary;
//         this is a test of expanded pictures
    long varz;
//         this is a test of x(4) type pictures
    struct {
	char filler000 [2];
	char street [21];
	char filler001 [2];
	long house;
    } address;
    char name [19];
} varx UNUSED;
static char city [16] UNUSED;


static void _SetVarValues (void)
{
    varx.varz = 60;
    _AssignVarString (varx.address.filler000, " ", 1, 0);
    _AssignVarString (varx.address.street, "Main st.", 20, 0);
    _AssignVarString (varx.address.filler001, " ", 1, 0);
    varx.address.house = 301;
    _AssignVarString (city, "Baltimore", 15, 0);
}

static int _FirstParagraph (void)
{
    printf ("This is a cobol program");
    printf ("\n");
    display_address();
    printf ("This is a cobol program 10 times");
    printf ("\n");
    for (_index = 0; _index < 10; ++ _index)
	display_address();
    return _pi__Exit;
    return _po__Next;
}

static int display_address (void)
{
display_address: UNUSED
    _WriteIntegerVar (stdout, varx.vary, "9999");
    _WriteIntegerVar (stdout, varx.varz, "99999");
    _WriteStringVar (stdout, varx.address.filler000, "x");
    _WriteStringVar (stdout, varx.address.street, "xxxxxxxxxxxxxxxxxxxx");
    _WriteStringVar (stdout, varx.address.filler001, "x");
    _WriteIntegerVar (stdout, varx.address.house, "999999");
    _WriteStringVar (stdout, varx.name, "xxxxxxxxxxxxxxxxxx");
    printf ("\n");
    return _po__Next;
}

int main (void)
{
    _InstallSignalHandlers();
    _SetVarValues();
    for (long cpi = _pi__FirstParagraph; cpi < _pi__NParagraphs;) {
	switch (cpi) {
	    case _pi__FirstParagraph:	cpi += _FirstParagraph(); break;
	    case _pi_display_address:	cpi += display_address(); break;
	    default:	cpi = _pi__Exit; assert (!"abnormal exit"); break;
	}
    }
    return EXIT_SUCCESS;
}
------------------------------------------------------------
This is a cobol program
   0   60 Main st.                301
This is a cobol program 10 times
   0   60 Main st.                301
   0   60 Main st.                301
   0   60 Main st.                301
   0   60 Main st.                301
   0   60 Main st.                301
   0   60 Main st.                301
   0   60 Main st.                301
   0   60 Main st.                301
   0   60 Main st.                301
   0   60 Main st.                301
------------------------------------------------------------

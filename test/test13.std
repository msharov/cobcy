------------------------------------------------------------
// test13.c
// Generated by Cobol-to-C compiler from test13.cob.

#include <coblib/cobfunc.h>

// This program is called test-program
enum {
    _pi__FirstParagraph,
    _pi_write_loop,
    _pi_end_loop,
    _pi__NParagraphs,
    _pi__Exit,
    _po__Next = 1
};

static int write_loop (void);
static int end_loop (void);


static DBF_FILE* sample_rel_file UNUSED;

static struct {
    char name [26];
    char address [26];
    long aptnum;
    char city [16];
    long zip;
} sample_rel_record UNUSED;
static long count_var UNUSED;


static void _SetVarValues (void)
{
    count_var = 1;
}

static int _FirstParagraph (void)
{
    printf ("This program will write a file with relative organization");
    printf ("\n");
    printf ("The file will be called 'relative.dbf'");
    printf ("\n");
    _OpenRelativeFile (&sample_rel_file, "relative.dbf", " name C 25 0 address C 25 0 aptnum N 4 0 city C 15 0 zip N 10 0", "wb");
    return _po__Next;
}

static int write_loop (void)
{
write_loop: UNUSED
    _AssignVarString (sample_rel_record.name, "Whoever", 25, 0);
    _AssignVarString (sample_rel_record.address, "Wherever", 25, 0);
    sample_rel_record.aptnum = count_var;
    _AssignVarString (sample_rel_record.city, "I don't know", 15, 0);
    sample_rel_record.zip = 837480985;
    DBF_AppendRecord (sample_rel_file);
    _WriteStringVar (sample_rel_file->DataDesc, sample_rel_record.name, "xxxxxxxxxxxxxxxxxxxxxxxxx");
    _WriteStringVar (sample_rel_file->DataDesc, sample_rel_record.address, "xxxxxxxxxxxxxxxxxxxxxxxxx");
    _WriteIntegerVar (sample_rel_file->DataDesc, sample_rel_record.aptnum, "9999");
    _WriteStringVar (sample_rel_file->DataDesc, sample_rel_record.city, "xxxxxxxxxxxxxxx");
    _WriteIntegerVar (sample_rel_file->DataDesc, sample_rel_record.zip, "99999b9999");
    DBF_SeekToNext (sample_rel_file);
    count_var = count_var + 1;
    if ((count_var > 10))
    {
	return _pi_end_loop - _pi_write_loop;
    }
    goto write_loop;
    return _po__Next;
}

static int end_loop (void)
{
end_loop: UNUSED
    fflush (sample_rel_file->DataDesc);
    _CloseRelativeFile (&sample_rel_file);
    printf ("All done.");
    printf ("\n");
    return _pi__Exit;
    return _po__Next;
}

int main (void)
{
    _InstallSignalHandlers();
    _SetVarValues();
    for (long cpi = _pi__FirstParagraph; cpi < _pi__NParagraphs;) {
	switch (cpi) {
	    case _pi__FirstParagraph:	cpi += _FirstParagraph(); break;
	    case _pi_write_loop:	cpi += write_loop(); break;
	    case _pi_end_loop:	cpi += end_loop(); break;
	    default:	cpi = _pi__Exit; assert (!"abnormal exit"); break;
	}
    }
    return EXIT_SUCCESS;
}
------------------------------------------------------------
This program will write a file with relative organization
The file will be called 'relative.dbf'
All done.
------------------------------------------------------------
